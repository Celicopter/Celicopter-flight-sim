import joystick.JInputJoystick;

//TODO Make class...
/**
 * Representation and encapsulation of the equations that 
 * underly helicopter dynamics. 
 * @author Nathan_Schilling and Matt Horr
 *
 */
public class DynamicsModel {

	/**Object representing the joystick. Holds all information about the state of the joystick since it was polled last*/
	private JInputJoystick stick;
	/**Gain for movement along the x-axis*/
	private double xGain;
	/**Gain for movement along the y-axis*/
	private double yGain;

	/**
	 * Creates a basic Dynamics Model object, in this case with a null stick,
	 * xGain and yGain set to zero
	 */
	public DynamicsModel(){
		stick=null;
		xGain=0;
		yGain=0;
	}
	
	/**
	 * 
	 * @param stick
	 * @param xGain
	 * @param yGain
	 */
	public DynamicsModel(JInputJoystick stick, double xGain, double yGain) {
		this.stick = stick;
		this.xGain = xGain;
		this.yGain = yGain;
	}
	public double solveDx(long time,double dx) {
		if(stick!=null){// Check if the controller was found.
			if( !stick.isControllerConnected() )
			{
				System.err.println("No controller found!");
				// Do some stuff.
			}

			// Get current state of joystick! And check, if joystick is disconnected.
			if( !stick.pollController() ) {
				System.err.println("Controller disconnected!");
				// Do some stuff.
			}
			return xGain*(stick.getXAxisPercentage()-50)/100;
		}
		else
			return dx;
	}

	public double solveDy(long time,double dy) {
		// TODO Auto-generated method stub
		if(stick!=null){
			// Check if the controller was found.
			if( !stick.isControllerConnected() )
			{
				System.err.println("No controller found!");
				// Do some stuff.
			}

			// Get current state of joystick! And check, if joystick is disconnected.
			if( !stick.pollController() ) {
				System.err.println("Controller disconnected!");
				// Do some stuff.
			}
			return yGain*(stick.getYAxisPercentage()-50)/100;
		}
		else
			return dy;
	}

}
