import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.Arrays;


/**
 * Represents a group of Target Objects on screen
 * @author Nathan_Schilling
 *
 */
public class TargetGroup extends Target{
	/**ArrayList to hold the target objects. Can be expanded or contracted as needed to accommodate additional Targets*/
	private ArrayList<Target> targets;
	/**Represents the boundary of the collection of Target objects*/
	private Rectangle boundary;

	/**Constructs an empty TargetGroup.*/
	public TargetGroup(){
		super();
		targets=new ArrayList<Target>();
	}

	/**
	 * All arrays passed to this constructor must have the same dimensions.
	 * This is because the first radius in the radii array is matched with 
	 * the first theta in the thetas array, which is matched with the first 
	 * target in the Targets array. Together, the radiis and thetas are used 
	 * to position the centers of the Targets in the Target array relative to the x and y center the user specifies.
	 * Thetas are interpreted in degrees. 0 degrees corresponds to pointing strait down on-screen
	 * Radii are in pixels
	 * Constructs a TargetGroup with the given parameters:
	 * @param x starting x-coordinate of the center of the group
	 * @param y starting y-coordinate of the center of the group
	 * @param radii array holding the distance each Target is away from the x,y center of the group
	 * @param thetas array holding the angles between the vertical and the center of the corresponding target (degrees) 
	 * @param scs array holding the Target objects. Only the size and shape of the objects will be used 
	 */
	public TargetGroup(int x, int y,double[] radii,double[] thetas,Target[] scs){
		super();
		ArrayList<Target> temps=new ArrayList<Target>();
		for(int i=0;i<scs.length;i++){
			scs[i].xCenterPosition=0;
			scs[i].yCenterPosition=0;
			scs[i].dx=0;
			scs[i].dy=0;
			if(temps.contains(scs[i]))
				temps.add(scs[i].clone());
			else
				temps.add(scs[i]);
		}
		if(radii.length==thetas.length && radii.length==temps.size()){
			for(int i=0;i<temps.size();i++){
				temps.get(i).xCenterPosition=(int) (x+radii[i]*Math.cos(Math.PI*thetas[i]/180));
				temps.get(i).yCenterPosition=(int) (y+radii[i]*Math.sin(Math.PI*thetas[i]/180));
			}
			targets=temps;
		}
		else{
			System.err.println("Fatal Error--array dimentions no not agree");
			System.exit(0);
		}
		xCenterPosition=x;
		yCenterPosition=y;
	}
	
	/**
	 * All arrays passed to this constructor must have the same dimensions.
	 * This is because the first radius in the radii array is matched with 
	 * the first theta in the thetas array, which is matched with the first 
	 * target in the Targets array. Together, the radiis and thetas are used 
	 * to position the centers of the Targets in the Target array relative to the x and y center the user specifies.
	 * Thetas are interpreted in degrees. 0 degrees corresponds to pointing strait down on-screen
	 * Radii are in pixels.
	 * Allows the user to specify x and y-axis speeds
	 * Constructs a TargetGroup with the given parameters:
	 * @param x starting x-coordinate of the center of the group
	 * @param y starting y-coordinate of the center of the group
	 * @param dx starting velocity along the x-axis
	 * @param dy starting velocity along the y-axis
	 * @param radii array holding the distance each Target is away from the x,y center of the group
	 * @param thetas array holding the angles between the vertical and the center of the corresponding target (degrees) 
	 * @param scs array holding the Target objects. Only the size and shape of the objects will be used 
	 */
	public TargetGroup(int x, int y,double dx,double dy,double[] radii,double[] thetas,Target[] scs){
		super();
		ArrayList<Target> temps=new ArrayList<Target>();
		for(int i=0;i<scs.length;i++){
			scs[i].xCenterPosition=0;
			scs[i].yCenterPosition=0;
			scs[i].dx=0;
			scs[i].dy=0;
			if(temps.contains(scs[i]))
				temps.add(scs[i].clone());
			else
				temps.add(scs[i]);
		}
		if(radii.length==thetas.length && radii.length==temps.size()){
			for(int i=0;i<temps.size();i++){
				temps.get(i).xCenterPosition=(int) (x+radii[i]*Math.cos(Math.PI*thetas[i]/180));
				temps.get(i).yCenterPosition=(int) (y+radii[i]*Math.sin(Math.PI*thetas[i]/180));
			}
			targets=temps;
		}
		else{
			System.err.println("Fatal Error--array dimentions no not agree");
			System.exit(0);
		}
		xCenterPosition=x;
		yCenterPosition=y;
		this.dx=dx;
		this.dy=dy;
	}
	
	/**
	 * Creates a group with a starting Target in the center
	 * @param t starting Target
	 */
	public TargetGroup(Target t){
		super();
		targets=new ArrayList<Target>();
		xCenterPosition=t.xCenterPosition;
		yCenterPosition=t.yCenterPosition;
		dx=t.dx;
		dy=t.dy;
		this.add(t);
		calculateCenter();
	}

	/**
	 * Creates a group from the ArrayList passed in
	 * @param ts ArrayList passed in that hold all starting Target objects in the group
	 */
	public TargetGroup(ArrayList<Target> ts){
		super();
		targets=ts;
		updateDx(this.dx);
		updateDy(this.dy);
		calculateCenter();
	}

	/**
	 * Sets the dx (x-velocity) of all Targets in the TargetGroup to the dx of the TargetGroup
	 * (as a subclass of the Target class, the TargetGroup has it's own dx field)
	 */
	public void updateDx(){
		for(Target t:targets)
			t.dx=this.dx;
	}

	/**
	 * Sets the dy (y-velocity) of all Targets in the TargetGroup to the dy of the TargetGroup
	 * (as a subclass of the Target class, the TargetGroup has it's own dy field)
	 */
	public void updateDy(){
		for(Target t:targets)
			t.dy=this.dy;
	}
	
	/**
	 * Sets dx of this TargetGroup to the specified parameter,
	 * then sets all Targets in this TargetGroup to this dx as well
	 * @param dx TargetGroup's dx, and the dx's of a Targets in this TargeGroup will be set to this value
	 */
	public void updateDx(double dx){
		this.dx=dx;
		updateDx();
	}

	/**
	 * Sets dy of this TargetGroup to the specified parameter,
	 * then sets all Targets in this TargetGroup to this dy as well
	 * @param dy TargetGroup's dy, and the dy's of a Targets in this TargeGroup will be set to this value
	 */
	public void updateDy(double dy){
		this.dy=dy;
		updateDy();
	}

	/**
	 * Recalculates the boundary of this group based on the current position of all objects in this group. This method must be called everytime the group is moved or a new Target is added to the group 
	 */
	private void caclculateBoundary() {
		if(!targets.isEmpty()){
			Target firstTarget=targets.get(0);
			int leastX=(int) Math.round(firstTarget.xCenterPosition-firstTarget.getPixelDiameter()/2);
			int leastY=(int) Math.round(firstTarget.yCenterPosition-firstTarget.getPixelDiameter()/2);
			int maxX=(int) Math.round(firstTarget.xCenterPosition+firstTarget.getPixelDiameter()/2);
			int maxY=(int) Math.round(firstTarget.yCenterPosition+firstTarget.getPixelDiameter()/2);
			int LeastX,LeastY,MaxX,MaxY;
			for(Target t:targets){
				if(t.shape==null)
				{
					LeastX=(int) Math.round(t.xCenterPosition-t.getPixelDiameter()/2);
					LeastY=(int) Math.round(t.yCenterPosition-t.getPixelDiameter()/2);
					MaxX=(int) Math.round(t.xCenterPosition+t.getPixelDiameter()/2);
					MaxY=(int) Math.round(t.yCenterPosition+t.getPixelDiameter()/2);
				}
				else {
					LeastX=(int) Math.round(t.xCenterPosition-t.shape.getBounds2D().getWidth()/2);
					LeastY=(int) Math.round(t.yCenterPosition-t.shape.getBounds2D().getHeight()/2);
					MaxX=(int) Math.round(t.xCenterPosition+t.shape.getBounds2D().getWidth()/2);
					MaxY=(int) Math.round(t.yCenterPosition+t.shape.getBounds2D().getHeight()/2);
				}
				if(LeastX<leastX)
					leastX=LeastX;
				if(LeastY<leastY)
					leastY=LeastY;
				if(MaxX>maxX)
					maxX=MaxX;
				if(MaxY>maxY)
					maxY=MaxY;
			}
			boundary=new Rectangle(leastX,leastY,maxX-leastX,maxY-leastY);
		}

	}

	/**
	 * Adds another Target to the TargetGroup
	 * Returns false if the object to be added already is in the group
	 * @param t
	 * @return true if element was successfully added, false otherwise
	 */
	public boolean add(Target t){
		if(targets!=null){
			boolean b=true;
			for(Target tt:targets)
				if(tt==t)
					b=false;
			if(b)
				b=targets.add(t);
			else
				System.err.println("This element is already in the list");
				t.dx=dx;
				t.dy=dy;
				calculateCenter();
				return false;
			}
		else
			System.err.println("This group has a null targets/is undefined");
		return false;
	}

	public boolean remove(Target t){
		if(targets!=null)
			if(!targets.isEmpty()){
				boolean b=targets.remove(t);
				calculateCenter();
				return b;
			}
			else
				System.err.println("This group is empty");
		else
			System.err.println("This group has a null targets/is undefined");
		return false;
	}

	public Target remove(int index){
		if(targets!=null)
			if(!targets.isEmpty()){
				Target b=targets.remove(index);
				calculateCenter();
				return b;
			}
			else
				System.err.println("This group is empty");
		else
			System.err.println("This group has a null targets/is undefined");
		return null;
	}

	public Target get(int index){
		if(targets!=null)
			if(!targets.isEmpty())
				return targets.get(index);
			else
				System.err.println("This group is empty");
		else
			System.err.println("This group has a null targets/is undefined");
		return null;
	}

	/**
	 * Calculates the center of this Target group based on an average the centers of each target
	 */
	public void calculateCenter(){
		if(!targets.isEmpty()&& targets!=null){
			caclculateBoundary();
//			xCenterPosition=(int) Math.round(boundary.getX()+boundary.getWidth()/2);
//			yCenterPosition=(int) Math.round(boundary.getY()+boundary.getHeight()/2);
			double muX=0;
			double muY=0;
			for(Target t:targets){
				muX+=t.xCenterPosition*1.0/targets.size();
				muY+=t.yCenterPosition*1.0/targets.size();
			}
			xCenterPosition=(int) Math.round(muX);
			yCenterPosition=(int) Math.round(muY);
		}
		
	}

	public void move(int newX,int newY, int screenWidth,int screenHeight){
		int deltaX=newX-xCenterPosition;
		int deltaY=newY-yCenterPosition;
		if(targets!=null && !targets.isEmpty()){
			Target leftTarget=null,topTarget=null,bottomTarget=null,rightTarget=null;
			double minXdist=0,minYdist=0;
			int mostTx=0,mostTy=0;
			for(Target t:targets){
				int newTx=t.xCenterPosition+deltaX;
				int newTy=t.yCenterPosition+deltaY;
				if(t.distanceFromLeftSide(newTx)<minXdist){
					leftTarget=t;
					mostTx=newTx;
					minXdist=leftTarget.distanceFromLeftSide(mostTx);
				}
				if(t.distanceFromRightSide(newTx, screenWidth)<minXdist){
					rightTarget=t;
					mostTx=newTx;
					minXdist=rightTarget.distanceFromRightSide(mostTx, screenWidth);
				}
				if(t.distanceFromTop(newTy)<minYdist){
					topTarget=t;
					mostTy=newTy;
					minYdist=topTarget.distanceFromTop(mostTy);
				}
				if(t.distanceFromBottom(newTy, screenHeight)<minYdist){
					bottomTarget=t;
					mostTy=newTy;
					minYdist=bottomTarget.distanceFromBottom(mostTy, screenHeight);
				}
			}
			if(leftTarget!=null || rightTarget!=null){
				if(leftTarget!=null && rightTarget!=null){
					deltaX=0;
					System.err.println("Error--group to large or spread out to fit sideways on screen.");
				}
				else{ if(leftTarget!=null)
						deltaX-=(int) Math.round(leftTarget.distanceFromLeftSide(mostTx));
					  else
						deltaX+=(int) Math.round(rightTarget.distanceFromRightSide(mostTx,screenWidth));
				}
			}
			if(topTarget!=null || bottomTarget!=null){
				if(topTarget!=null && bottomTarget!=null){
					deltaY=0;
					System.err.println("Error--group to large or spread out to fit sideways on screen.");
				}
				else{ if(topTarget!=null)
						deltaY-=(int) Math.round(topTarget.distanceFromTop(mostTy));
					  else
						deltaY+=(int) Math.round(bottomTarget.distanceFromBottom(mostTy,screenHeight));
				}
			}
		xCenterPosition+=deltaX;
		yCenterPosition+=deltaY;
		for(Target t:targets){
			t.xCenterPosition+=deltaX;
			t.yCenterPosition+=deltaY;
		}
		}
	}
	
	public ArrayList<Target> getTargets(){
		return targets;
	}
	
	public void move(long delta,int screenWidth,int screenHeight){
		setDx(delta);
		setDy(delta);
		updateDx();
		updateDy();
		calculateCenter();
		double x=boundary.getX()+delta*dx;
		double y=boundary.getY()+delta*dy;
		if(x<0 || x+boundary.getWidth()>screenWidth){
			if(x<0 && x+boundary.getWidth()>screenWidth)
				dx=0;
			else
				dx=-dx;
			updateDx();
		}
		if(y<0 || y+boundary.getHeight()>screenHeight){
			if(y<0 && y+boundary.getHeight()>screenHeight)
				dy=0;
			else
				dy=-dy;
			updateDy();
		}
		for(Target t:targets)
			t.move(delta,screenWidth,screenHeight);
		calculateCenter();
	}

	public void draw(Graphics2D g){
		if(targets!=null && !targets.isEmpty())
			for(Target t:targets)
				t.draw(g);
	}
}
