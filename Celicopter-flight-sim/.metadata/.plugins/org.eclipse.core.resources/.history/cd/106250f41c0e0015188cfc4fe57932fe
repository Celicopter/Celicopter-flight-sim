import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import javax.swing.JFrame;

public class Test extends Canvas{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public static void main(String []args){
		Test t=new Test();
		JFrame f=new JFrame();
		
		/*
		//Gets information related to the display screen. This only works for single-monitor devices
		Toolkit tk = Toolkit.getDefaultToolkit();  
		
		//Gets the width of the screen and stores it in variable xSize
	    int xSize = ((int) tk.getScreenSize().getWidth()); 
	    
	  //Gets the height of the screen and stores it in variable ySize
	    int ySize = ((int) tk.getScreenSize().getHeight());  
	    
	    //Sets the screen to it's maximum allowable size (maximizes screen)
	    f.setSize(xSize,ySize);
	    */
		
		Rectangle virtualBounds = new Rectangle();
	      GraphicsEnvironment ge = GraphicsEnvironment.
	              getLocalGraphicsEnvironment();
	      GraphicsDevice[] gs =
	              ge.getScreenDevices();
	      for (int j = 0; j < gs.length; j++) {
	          GraphicsDevice gd = gs[j];
	          GraphicsConfiguration[] gc =
	              gd.getConfigurations();
	          for (int i=0; i < gc.length; i++) {
	              virtualBounds =
	                  virtualBounds.union(gc[i].getBounds());
	          }
	      }
	    
		f.add(t);
		f.setVisible(true);
		f.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				System.exit(0);
			}//closes window listener that closes the program when we exit out of the window
		}//closes patch
		);
	}

	public Test() {
		super();
	}
	
	public void paint(Graphics g){
		g.fillPolygon(createPoly(100,10));
	}
	
	private Polygon createPoly(int numberOfSides,int sideLength){
		int[] xPts=new int[numberOfSides];
		int[] yPts=new int[numberOfSides];
		double intAngle=2*Math.PI/numberOfSides;
		double r=sideLength/(2*Math.sin(intAngle));
		double theta=(3*Math.PI/2)+intAngle/2;
		for(int i=0;i<numberOfSides;i++){
			xPts[i]=(int) (r*Math.sin(theta+i*intAngle));
			yPts[i]=(int) (r*Math.cos(theta+i*intAngle));
		}
		Polygon p= new Polygon(xPts,yPts,numberOfSides);
		p.translate((int) (0+p.getBounds2D().getWidth()/2), (int) (0+p.getBounds2D().getHeight()/2));
		return p;
	}
}