import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.util.ArrayList;

import javax.swing.*;

import joystick.JInputJoystick;
import net.java.games.input.Controller;

public class MainResearchProgram extends Canvas{
	
	/**Represents the bounds of the window. Expands to occupy two monitors*/
	private Dimension screenDimentions;
	/**Holds the graphics object that stuff is drawn on*/
	private BufferStrategy canvas;
	/**Represents the target object to track*/
	private Target target;
	/**Holds all the things on the screen that the user doesnt have to track. This is the scenery*/
	private ArrayList<ScreenObject> scenery;
	/**Represents the on-screen object the user controls. The class name Cursor was already taken so for our class we simply misspelled the word*/
	private Curseor warfighter;
	/**Holds the last time the loop was run. Used to calculate the speeds at which everything on-screen moves*/
	private long lastLoopTime;
	/**True if stick and program are calibrated properly*/
	private boolean isCalibrated;
	/**All the things you would ever want to know about the state of the control stick*/
	private JInputJoystick stick;
	/**True if the experiment is running, false otherwise*/
	private boolean isRunning;
	/**Array of spatial frequencies to test*/
	private static final double[] spacialFrequencies={1,10,100};
	/**Array of corresponding pixel widths. A pixel width is the width(diameter, whatever) of an on-screen object in screen pixels*/
	private static int[] pixelWidths;
	/**Test subject distance from screen in inches*/
	private static final double distanceFromScreenInInches=48;
	/**Array of modulation levels to test. 1.0 is full, sharp, black, 0.0 is fully invisible*/
	private static final double[] modulations={1.0,0.0,0.5,0.25,0.75};
	
	public MainResearchProgram(){
		super();
		/**This code should work for devices with multiple screens*/
		//Defines a variable to hold the maximum bounds of the screen we will find shortly
		Rectangle virtualBounds = new Rectangle();
		//Gets an object that encapsulates all periphery devices attached to this computer (screens, printers, etc.)
		GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
		//Unpacks this object and gets a list of all peripheries 
		GraphicsDevice[] gs = ge.getScreenDevices();
		//Iterates through this list, going to each device, getting the list of settings with each device, and parsing the maximum window size from these settings  
		for (int j = 0; j < gs.length; j++) {
			//Gets the list of settings associated with the device the for loop is currently on
			GraphicsConfiguration[] gc =gs[j].getConfigurations();
			//Iterates through the settings to get the bounds
			for (int i=0; i < gc.length; i++) {
				virtualBounds =virtualBounds.union(gc[i].getBounds());
			}
		}
		//Creates new frame to hold and display our game object
		JFrame jiff=new JFrame("IMPORTANT RESEARCH PROGRAME");
		jiff.setPreferredSize(new Dimension(virtualBounds.width,virtualBounds.height));
		JPanel panel = (JPanel) jiff.getContentPane();
		panel.setLayout(null);
		// setup our canvas size and put it into the content of the frame
		setBounds(virtualBounds);
		panel.add(this);
		
		// Tell AWT not to bother repainting our canvas since we're
		// going to do that our self in accelerated mode
		setIgnoreRepaint(true);
		
		// finally make the window visible 
		jiff.pack();
		jiff.setVisible(true);

		// request the focus so key events come to us
		requestFocus();

		//Makes the experiment double-buffered (animation looks smoother)
		createBufferStrategy(3);
		canvas = getBufferStrategy();
		
		//Sets the bounds of the experiment display to take up all the screens connected
		jiff.setBounds(virtualBounds);
		
		
		
		//These couple lines make the program stop when we close the window. This is important for not making the computer excessively slow and preventing memory leaks
		jiff.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		isRunning=true;
		isCalibrated=false;
		//Ties the joystick to the program so information can be pulled from the joystick
		stick=new JInputJoystick(Controller.Type.STICK);
		//Initializes the scenery
		scenery=null;
		//Initalizes the Target
		target=new Target(100,getHeight()/2,0.5,0.5,182,1);
		convertToSpacialFrequencies();
		//Allows us to see the frame we just made so we can actually see our flight-sim
		jiff.setVisible(true);
		lastLoopTime = System.currentTimeMillis();
	}
	
	public void calibration(Graphics2D g){
		String message="";
		String message2="";
		if(!isCalibrated){
			//Blanks out the current screen
			g.setColor(Color.WHITE);
			g.fillRect(0, 0, getWidth(), getHeight());
			
			//Sets the font our text will be displayed at to be 24pt Sans Serif (because I like Sans Serif font)
			g.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 24));
			//Sets the text color to be black
			g.setColor(Color.black);

			//Checks to ensure controller is connected
			if( !stick.isControllerConnected() )
			{
				//If not, print an error in annoying red
				g.setColor(Color.red);
				message2="No controller found!";
			} else

				// Get current state of joystick! And check, if joystick is disconnected.
				if( !stick.pollController() ) {
					//If not, print an error in annoying red
					g.setColor(Color.red);
					message2="Controller disconnected!";
				}
				else {
					/* Sets the text that will be displayed on screen, in this case a modified 
					 * value of the current position the joystick is in. A value of 50 from either 
					 * the .getXAxisPercentage() or getYAxisPercentage() on the stick indicates 
					 * the stick is in the exact center (not pushed) either way with those axes.
					 * For the calibration procedure and to make things simpler, we subtract 50 before display. 
					 * This makes the numbers the user sees on the screen either positive, negative, or zero.
					 * Zero is what the user should aim for. A positive number means the calibration wheel 
					 * associated with either axes is too far forward, a negative meaning it is too far back.
					 * 
					 */
					message=(stick.getXAxisPercentage()-50)+", "+(stick.getYAxisPercentage()-50);
					message2="Use the wheels by the joystick to make\nthe two numbers at the top zero!";
					
				}
			if(stick.getXAxisPercentage()==50 && stick.getYAxisPercentage()==50){
				message2="Calibration complete";
			}
			//Prints messages to the screen in the upper-left
			g.drawString(message,0,g.getFontMetrics().getMaxAscent());
			g.drawString(message2,getWidth()/2-g.getFontMetrics().stringWidth(message2),getHeight()/2-g.getFontMetrics().getMaxAscent());			
		}
	}
	
	public void mainLoop(){
		Graphics2D g=(Graphics2D) canvas.getDrawGraphics();
		
		while(isRunning){
			System.out.println(this.getParent().getHeight());
			long delta=System.currentTimeMillis()-lastLoopTime;
			lastLoopTime=System.currentTimeMillis();
			g=(Graphics2D) canvas.getDrawGraphics();
			//g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
			g.setColor(Color.black);
			g.fillRect(0, 0, getWidth(), getHeight());
			drawObjectsOnScreen(g);
			moveObjects(delta,this.getParent().getWidth(),this.getParent().getHeight());
			g.dispose();
			canvas.show();
			//Waits for 10 milliseconds before refreshing the screen
			try { Thread.sleep(20); } catch (InterruptedException e) { }
		}
	}
	
	public void moveObjects(long t, int w, int h) {
		target.move(t, w, h);
		
	}

	public void drawObjectsOnScreen(Graphics2D g){
		g.setColor(Color.green);
		g.fillRect(100, 100, Toolkit.getDefaultToolkit().getScreenResolution(),5);
		target.draw(g);
	}
	
	public static void main(String[] args){
		//Creates the frame we will display everything on and titles it (text at the top) "IMPORTANT RESEARCH PROGRAME"
		//Creates an instance of this class. Basically this line creates a 'canvas' (think painting canvas) that has a 
				//picture of the way everything looks. This picture changes over time; this is the point of a flight simulator. 
				//If it was a still picture it would be boring
				MainResearchProgram m=new MainResearchProgram();
		m.mainLoop();
	}
	
	public void convertToSpacialFrequencies(){
		//Makes the array of pixel widths the same size as the array of spatial frequencies-this allows the user to input in a array of spatial frequencies of any length
		pixelWidths=new int[spacialFrequencies.length];
		
		//Gets the (approximate) resolution of the screen 
		int dpi=Toolkit.getDefaultToolkit().getScreenResolution();
		//Fills the array of pixel widths based on the input array spatial frequencies
		for(int i=0;i<spacialFrequencies.length;i++){
			pixelWidths[i]=(int) (distanceFromScreenInInches*dpi*Math.tan(1/spacialFrequencies[i]));
		}
	}
}
